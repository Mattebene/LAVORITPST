package it.edu.iisgubbio.Prova;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

/**
 * Implementazione dell'algoritmo Round Robin con interfaccia minima in JavaFX.
 */
public class RoundRobinAlgorithm extends Application {

    private int quantum = 2; // quantità di tempo assegnata a ciascun processo
    private int[] processi = {5, 3, 8, 6, 4}; // durata dei processi
    private int tempoCorrente = 0; // tempo corrente durante l'esecuzione

    @Override
    public void start(Stage primaryStage) {
        GridPane root = new GridPane();
        Scene scene = new Scene(root, 300, 200);

        Label outputLabel = new Label();

        Button runButton = new Button("Esegui Round Robin");
        runButton.setOnAction(event -> {
            for (int i = 0; i < processi.length; i++) {
                int tempoRimanente = processi[i];
                while (tempoRimanente > 0) {
                    if (tempoRimanente > quantum) {
                        outputLabel.setText("Il processo " + i + " è in esecuzione da " + tempoCorrente + " a " + (tempoCorrente + quantum));
                        tempoCorrente += quantum;
                        tempoRimanente -= quantum;
                    } else {
                        outputLabel.setText("Il processo " + i + " è in esecuzione da " + tempoCorrente + " a " + (tempoCorrente + tempoRimanente));
                        tempoCorrente += tempoRimanente;
                        tempoRimanente = 0;
                    }
                }
            }
        });

        root.add(runButton, 0, 0);
        root.add(outputLabel, 0, 1);

        primaryStage.setTitle("Algoritmo Round Robin");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
