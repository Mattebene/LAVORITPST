package it.edu.iisgubbio.Prova;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.List;

public class Sjn extends Application {

    private List<Processi> processo;

    /**
     * Il punto di ingresso principale per l'applicazione JavaFX.
     *
     * @param args Gli argomenti della riga di comando (non utilizzati).
     */
    public static void main(String[] args) {
        launch(args);
    }

    /**
     * Il metodo start viene chiamato dopo che il metodo init ha restituito il controllo e dopo che il sistema è pronto per far iniziare l'applicazione.
     * È responsabile per la creazione e la configurazione del palcoscenico principale e della scena per l'applicazione JavaFX.
     *
     * @param primaryStage Il palcoscenico principale per questa applicazione.
     */
    public void start(Stage primaryStage) {

        processo = new ArrayList<>();

        GridPane gridPane = new GridPane();
        gridPane.setPadding(new Insets(10));
        gridPane.setHgap(10);
        gridPane.setVgap(10);

        Label lProcesso = new Label("Processo:");
        gridPane.add(lProcesso, 0, 0);

        TextField tProcesso = new TextField();
        gridPane.add(tProcesso, 1, 0);

        Label lArrivo = new Label("tempo di arrivo:");
        gridPane.add(lArrivo, 0, 1);

        TextField tArrivo = new TextField();
        gridPane.add(tArrivo, 1, 1);

        Button bAggiungi = new Button("aggiungi processo");
        gridPane.add(bAggiungi, 0, 2);

        Button bCalcola = new Button("Calcola");
        gridPane.add(bCalcola, 1, 2);

        Scene scene = new Scene(gridPane, 300, 150);
        primaryStage.setScene(scene);
        primaryStage.show();

        // Aggiunge un processo alla lista dei processi quando viene premuto il pulsante "aggiungi processo"
        bAggiungi.setOnAction(event -> {
            String nomeProcesso = tProcesso.getText();
            int tempoArrivo = Integer.parseInt(tArrivo.getText());

            Processi process = new Processi(nomeProcesso, tempoArrivo);
            processo.add(process);
        });

        // Calcola e visualizza i risultati SJN quando viene premuto il pulsante "Calcola"
        bCalcola.setOnAction(event -> {
            if (processo.isEmpty()) {
                System.out.println("NON HAI INSERITO PROCESSI");
                return;
            }

            // Ordina i processi in base al tempo di esecuzione
            processo.sort((p1, p2) -> p1.getTempoEsecuzione() - p2.getTempoEsecuzione());

            System.out.println("SJN Risultato:");

            int tempoTotale = 0;
            int tempoAttesaTotale = 0;

            for (Processi processi : processo) {
                System.out.println("Nome processo: " + processi.getNomeProcesso());
                System.out.println("Tempo di esecuzione: " + processi.getTempoEsecuzione());
                System.out.println("Tempo di attesa: " + tempoAttesaTotale);

                tempoTotale += processi.getTempoEsecuzione();
                tempoAttesaTotale += tempoAttesaTotale;
            }

            double tempoMedioAttesa = (double) tempoAttesaTotale / processo.size();
            System.out.println("Tempo totale: " + tempoTotale);
            System.out.println("Tempo medio di attesa: " + tempoMedioAttesa);
        });
    }

    /**
     * Classe interna che rappresenta un processo.
     */
    private static class Processi {
        private String nomeProcesso;
        private int tempoEsecuzione;

        public Processi(String nomeProcesso, int tempoEsecuzione) {
            this.nomeProcesso = nomeProcesso;
            this.tempoEsecuzione = tempoEsecuzione;
        }

        public String getNomeProcesso() {
            return nomeProcesso;
        }

        public int getTempoEsecuzione() {
            return tempoEsecuzione;
        }
    }
}
